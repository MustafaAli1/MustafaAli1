# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Setup Environment and build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up ruby env
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0.1'
        bundler-cache: true

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
          distribution: 'zulu'
          java-version: '11'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v2

    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Generate app bundle
      run: ./gradlew app:bundleRelease --stacktrace

    - name: Sign app bundle
      id: sign
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: app/build/outputs/bundle/release
        signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
        alias: ${{ secrets.KEY_ALIAS }}
        keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
          
  #   STEP 2 : Upload the Artifact
  upload:
    needs: [ build ]
    name: Upload the signed artifact
    runs-on: ubuntu-latest
    steps:
      - name: Upload Bundle
        uses: actions/upload-artifact@v2
        with:
          name: signed_app_bundle
          path: app/build/outputs/bundle/release/app-release.aab

  # Step 3 : Release to playstore
  deploy:
    needs: [ upload ]
    name: Create release on Playstore
    runs-on: ubuntu-latest
    steps:
      - name: Create service_account.json
        run: echo '${{ secrets.SERVICE_ACCOUNT_JSON }}' > service_account.json

      - name: Deploy to Play Store
        uses: r0adkll/upload-google-play@v1.0.15
        with:
          serviceAccountJson: service_account.json
          packageName: ${{ github.event.inputs.app_id }}
          releaseFiles: app/build/outputs/bundle/release/*.aab
          track: internal
          whatsNewDirectory: whatsnew/
          mappingFile: app/build/outputs/mapping/release/mapping.txt
          inAppUpdatePriority: 5
